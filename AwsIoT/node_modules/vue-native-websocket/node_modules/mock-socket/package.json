{
  "_args": [
    [
      {
        "raw": "mock-socket@https://registry.npmjs.org/mock-socket/-/mock-socket-6.1.0.tgz",
        "scope": null,
        "escapedName": "mock-socket",
        "name": "mock-socket",
        "rawSpec": "https://registry.npmjs.org/mock-socket/-/mock-socket-6.1.0.tgz",
        "spec": "https://registry.npmjs.org/mock-socket/-/mock-socket-6.1.0.tgz",
        "type": "remote"
      },
      "/Users/jlien/Projects/AwsIoT/AwsIoT/node_modules/vue-native-websocket"
    ]
  ],
  "_from": "mock-socket@https://registry.npmjs.org/mock-socket/-/mock-socket-6.1.0.tgz",
  "_id": "mock-socket@6.1.0",
  "_inCache": true,
  "_location": "/vue-native-websocket/mock-socket",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mock-socket@https://registry.npmjs.org/mock-socket/-/mock-socket-6.1.0.tgz",
    "scope": null,
    "escapedName": "mock-socket",
    "name": "mock-socket",
    "rawSpec": "https://registry.npmjs.org/mock-socket/-/mock-socket-6.1.0.tgz",
    "spec": "https://registry.npmjs.org/mock-socket/-/mock-socket-6.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [],
  "_resolved": "https://registry.npmjs.org/mock-socket/-/mock-socket-6.1.0.tgz",
  "_shasum": "f0a8815c8d05eae4a4db2485bd398f23e303052c",
  "_shrinkwrap": null,
  "_spec": "mock-socket@https://registry.npmjs.org/mock-socket/-/mock-socket-6.1.0.tgz",
  "_where": "/Users/jlien/Projects/AwsIoT/AwsIoT/node_modules/vue-native-websocket",
  "author": {
    "name": "Travis Hoover"
  },
  "ava": {
    "files": [
      "tests/**/*.test.js"
    ],
    "require": [
      "babel-register",
      "babel-polyfill"
    ],
    "babel": "inherit"
  },
  "bugs": {
    "url": "https://github.com/thoov/mock-socket/issues"
  },
  "dependencies": {},
  "description": "Javascript mocking library for websockets and socket.io",
  "devDependencies": {
    "ava": "^0.19.1",
    "babel-core": "^6.24.1",
    "babel-loader": "^7.0.0",
    "babel-polyfill": "^6.23.0",
    "babel-preset-latest": "^6.24.1",
    "cross-env": "^5.0.0",
    "eslint": "^3.19.0",
    "eslint-config-airbnb-base": "^11.2.0",
    "eslint-plugin-import": "^2.0.1",
    "husky": "^0.13.3",
    "lint-staged": "^3.4.1",
    "nyc": "^10.3.2",
    "prettier": "^1.3.1",
    "rollup": "^0.41.6",
    "rollup-plugin-buble": "^0.15.0",
    "systemjs": "^0.20.12"
  },
  "directories": {
    "test": "tests"
  },
  "engines": {
    "node": ">= 4"
  },
  "homepage": "https://github.com/thoov/mock-socket",
  "keywords": [
    "websockets",
    "mock",
    "mocksocket",
    "sockets"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "lint",
      "format",
      "git add"
    ]
  },
  "main": "./dist/mock-socket.js",
  "name": "mock-socket",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <img width=600 src=\"http://imgur.com/Xt9X83M.png\">\n</p>\n\n<p align=\"center\">\nJavascript mocking library for <a href=\"https://developer.mozilla.org/en-US/docs/WebSockets\">websockets</a> and <a href=\"http://socket.io/\">socket.io</a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/thoov/mock-socket\">\n    <img src=\"https://travis-ci.org/thoov/mock-socket.svg?branch=master\" alt=\"Build Status\">\n  </a>\n  <a href=\"https://codeclimate.com/github/thoov/mock-socket/coverage\">\n    <img src=\"https://codeclimate.com/github/thoov/mock-socket/badges/coverage.svg\" alt=\"Code Coverage\">\n  </a>\n  <a href=\"https://codeclimate.com/github/thoov/mock-socket\">\n    <img src=\"https://codeclimate.com/github/thoov/mock-socket/badges/gpa.svg\" alt=\"Code GPA\">\n  </a>\n  <a href=\"http://badge.fury.io/js/mock-socket\">\n    <img src=\"https://badge.fury.io/js/mock-socket.svg\" alt=\"NPM Version\">\n  </a>\n</p>\n\n## Installation\n\n```shell\nyarn add mock-socket --dev\n```\n\n## Usage\n\nTo use within a node environment you can simply import or require the files directly. This\noption is great for phantomjs or CI environments.\n\n```js\nimport { WebSocket, Server, SocketIO } from 'mock-socket';\n\n// OR\n\nconst mockServer = require('mock-socket').Server;\nconst socketIO = require('mock-socket').SocketIO;\nconst mockWebSocket = require('mock-socket').WebSocket;\n```\n\n## Native WebSocket Example\n\n```js\n// chat.js\nfunction Chat() {\n  const chatSocket = new WebSocket('ws://localhost:8080');\n  this.messages = [];\n\n  chatSocket.onmessage = (event) => {\n    this.messages.push(event.data);\n  };\n}\n```\n\n```js\n// chat-test.js\nimport { Server } from 'mock-socket';\n\ndescribe('Chat Unit Test', () => {\n  it('basic test', (done) => {\n    const mockServer = new Server('ws://localhost:8080');\n    mockServer.on('connection', server => {\n      mockServer.send('test message 1');\n      mockServer.send('test message 2');\n    });\n\n    // Now when Chat tries to do new WebSocket() it\n    // will create a MockWebSocket object \\\n    var chatApp = new Chat();\n\n    setTimeout(() => {\n      const messageLen = chatApp.messages.length;\n      assert.equal(messageLen, 2, '2 messages where sent from the s server');\n\n      mockServer.stop(done);\n    }, 100);\n  });\n});\n```\n\n## Socket.IO Example\n\n```js\n// chat.js\nfunction Chat() {\n  const chatSocket = new io('http://localhost:8080');\n  this.messages = [];\n\n  socket.on('chat-message', data => {\n    this.messages.push(data);\n  };\n}\n```\n\n```js\n// chat-test.js\nimport { SocketIO, Server } from 'mock-socket';\n\ndescribe('Chat Unit Test', () => {\n  it('basic test', (done) => {\n    const mockServer = new Server('http://localhost:8080');\n    mockServer.on('connection', server => {\n      mockServer.emit('chat-message', 'test message 1');\n      mockServer.emit('chat-message', 'test message 2');\n    });\n\n    /*\n      This step is very important! It tells our chat app to use the mocked\n      websocket object instead of the native one. The great thing\n      about this is that our actual code did not need to change and\n      thus is agnostic to how we test it.\n    */\n    window.io = SocketIO;\n\n    // Now when Chat tries to do io() or io.connect()\n    // it will use MockSocketIO object\n    var chatApp = new Chat();\n\n    setTimeout(() => {\n      const messageLen = chatApp.messages.length;\n      assert.equal(messageLen, 2, '2 messages where sent from the server');\n      mockServer.stop(done);\n    }, 100);\n  });\n});\n```\n\n## Working with the source code\n\n### Local builds\nThe easiest way to work on the project is to clone the repo down via:\n\n```shell\ngit clone git@github.com:thoov/mock-socket.git\ncd mock-socket\nyarn\n```\nThen to create a local build via:\n\n```shell\nyarn build\n```\n\nThen create a local npm link via:\n\n```shell\nyarn link\n```\n\nAt this point you can create other projects / apps locally and reference this local build via:\n\n```shell\nyarn link mock-socket\n```\n\nfrom within your other projects folder. Make sure that after any changes you run `yarn build`!\n\n### Tests\nThis project uses mocha as its test framework. Tests are located in /test and have 1 of 3 file name prefixes (functional-, issue-#, or unit-).\n\n```shell\nyarn test\n```\n\n### Linting\n\nThis project uses eslint and a rules set from [airbnb's javascript style guides](https://github.com/airbnb/javascript). To run linting:\n\n```shell\nyarn lint\n```\n\n### Formatting\n\nThis project uses prettier with --single-quote and --print-width 120. To run the formatting:\n\n```shell\nyarn format\n```\n\n\n### Code Coverage\n\nCode coverage reports are created in /coverage after all of the tests have successfully passed. To run the coverage:\n\n```shell\nyarn test:coverage\n```\n\n## Feedback / Issues\n\nIf you have any feedback, encounter any bugs, or just have a question, please feel free to create a [github issue](https://github.com/thoov/mock-socket/issues/new) or send me a tweet at [@thoov](https://twitter.com/thoov).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thoov/mock-socket.git"
  },
  "scripts": {
    "build": "rm -rf dist && rollup -c rollup.config.js",
    "format": "prettier --print-width 120 --single-quote --write '{src,tests}/**/*.js'",
    "lint": "eslint src tests",
    "precommit": "lint-staged",
    "prepublish": "yarn build",
    "test": "cross-env NODE_ENV=test ava --serial --verbose",
    "test:coverage": "cross-env NODE_ENV=test nyc ava --serial"
  },
  "version": "6.1.0"
}
